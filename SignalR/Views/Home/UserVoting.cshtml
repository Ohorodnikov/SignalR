@model SignalR.ViewModel.VoteViewModel
@{
    ViewData["Title"] = "UserVoting";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <script type="text/javascript" src="~/js/jquery.bighover.js"></script>

}

<h2>UserVouting</h2>

@{
    var maxColCount = 5;
    var currentImg = 0;
}
<div class="alert alert-danger hidden" id="errorPanel">
    You just have voted for this image!
</div>
@*<div id="aniimated-thumbnials">
    <table id="imageTable" class="table table-bordered">
        @{
            var counter = 0;
            var imgCount = Model.Images.Count;
        }
        @for (int j = 0; j < imgCount / maxColCount + 1; j++)
        {

            @if (counter >= imgCount)
            {
                continue;
            }
            <tr>
                @for (int i = 0; i < maxColCount; i++)
                {
                    @if (counter >= imgCount)
                    {
                        continue;
                    }
                    else
                    {
                        var image = Model.Images[counter];
                        counter++;
                        <td id="@("image-cell-" + image.Id)">
                            <div class="elem-val text-center">
                                <img src="data:image / png;base64, @image.Base64" width="100" height="100" />
                            </div>
                            <span id="@("dislike-" + image.Id)" class="remove-img-val">
                                <span class="glyphicon glyphicon-remove pull-left" onclick="addVote(@image.Id, false)"></span>
                            </span>
                            <label id="@("dislikeLabel-" + image.Id)" class="pull-left">@image.DislikesCount</label>
                            <span id="@("like-" + image.Id)" class="remove-img-val">
                                <span class="glyphicon glyphicon-ok pull-right" onclick="addVote(@image.Id, true)"></span>
                            </span>
                            <label id="@("likeLabel-" + image.Id)" class="pull-right">@image.LikesCount</label>
                        </td>
                    }
                }

            </tr>
        }
    </table>
</div>*@

<div id="imagesId">
    @for (int i = 1; i < Model.Images.Count; i++)
    {
        var image = Model.Images[i];
        <input type="hidden" value="@image.Id" id="image-@i" data-base64=@image.Base64 data-id=@image.Id />
    }
</div>
<div class="panel">
    <div class="panel-heading">
        Please, vote this image
    </div>
    <div class="panel-body">
        <div class="img-rounded text-center">
            <input type="hidden" value="@Model.Images[0].Id" />
            <label id="currImgId">1</label> / <label>@Model.Images.Count</label>
            <br />
            <img id="imageShow" src="data:image/png;base64, @Model.Images[0].Base64" width="400" height="400"/>
        </div>
        <div>
            <button id="dislike-btn-@Model.Images[0].Id" class="btn btn-danger pull-left" onclick="addVote(@Model.Images[0].Id, false)">Dislike</button>
            <button id="like-btn-@Model.Images[0].Id" class="btn btn-success pull-right" onclick="addVote(@Model.Images[0].Id, true)">Like</button>
            
        </div>
    </div>
</div>


<div class="modal fade" id="imageModal" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">            
            <div class="modal-body" style="padding:40px 50px;">
                <img id="imageOnModal"/>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-danger btn-default pull-left" data-dismiss="modal">
                    <span class="glyphicon glyphicon-remove"></span> Cancel
                </button>                
            </div>
        </div>

    </div>
</div>


<script>

    





    var connection = new signalR.HubConnection('/chat');

    connection.on('Like', function (imageId) {
        var label = $("#likeLabel-" + imageId);
        var value = parseInt(label.textContent);
        value++;
        label.innerHTML = value;
    });

    connection.on('Dislike', function (imageId) {
        var label = $("#dislikeLabel-" + imageId);
        var value = parseInt(label.textContent);
        value++;
        label.innerHTML = value;
    });

    $(document).ready(function ()
    {
        
    });

    $(function () {
        
        //setClickOnImage();
        
    });

    function setClickOnImage() {        
        $("#imageShow").click(function () {
            var image = $(this).attr('src');
            var x = $(".modal-body").first().outerWidth();
            var e = $(".modal-body").first().first();
            var q = $(".modal-body").first().innerWidth();
            //var w = $(".modal-body").first().width();
            console.log($(".modal-body")[0]);
            //var w = $(".modal-body")[0].width();
            debugger;
            $("#imageOnModal").attr('src', image).load(function () {
                this.width = $("#imageModal").first().outerWidth();   // Note: $(this).width() will not work for in memory images
                //this.height = $(".modal-body").first().height() - 50;
            });
            $("#imageModal").modal();
        });

    };

    function addVote(imgId, like) {
        var model = {
            imgId: imgId,
            userId: @Model.User.Id,
            sessionId: @Model.User.Session.Id,
            like: like
        }
        $.ajax({
            url: 'AddVote/',
            type: 'post',
            dataType: "json",
            data: model,
            success: function (result) {
                if (result.includes("error")) {
                    $('#errorPanel').removeClass('hidden');
                    $('#errorPanel').css("display", "block");
                    $('#errorPanel').fadeOut(5000);
                }
                else {
                    if (like) {
                        connection.invoke('AddLike', "@Model.User.Session.SessionCode", imgId);
                    } else {
                        connection.invoke('AddDislike', "@Model.User.Session.SessionCode", imgId);
                    }
                    var currImgNum = $("#currImgId").text();
                    var nextImgNum = parseInt(currImgNum) + 1;

                    if (nextImgNum == @Model.Images.Count) {

                    }
                    else {
                        $("#currImgId").text(nextImgNum);
                        var disBtn = $("#dislike-btn-" + imgId);
                        var likeBtn = $("#like-btn-" + imgId);

                        var firstChild = $("#imagesId").children('').first();
                        var nextImgId = firstChild.data().id;
                        var nextImgBase64 = firstChild.data().base64;

                        disBtn.attr('id', 'dislike-btn-' + nextImgId);
                        disBtn.attr('onclick', 'addVote(' + nextImgId+', false)');
                        likeBtn.attr('id', 'like-btn-' + nextImgId);
                        likeBtn.attr('onclick', 'addVote(' + nextImgId + ', true)');
                        $("#imageShow").attr('src', 'data:image/png; base64, ' + nextImgBase64).load(function () {
                            this.width;   // Note: $(this).width() will not work for in memory images

                        });
                        //$("#imageShow").attr('onclick', 'zoom()');
                        firstChild.remove();
                        //$("#imageShow").unbind('click');
                        //setClickOnImage();
                    }
                }
            },
            error: function () {
                $('#errorPanel').removeClass('hidden');
                $('#errorPanel').css("display", "block");
                $('#errorPanel').fadeOut(5000);

            }
        });
    };

    function addDisLike(imgId) {
        var model = {
            imgId: imgId
        }
        $.ajax({
            url: 'AddDislike/',
            type: 'post',
            dataType: "json",
            data: model,
            success: function (result) {
                connection.invoke('AddDislike', imgId);
            }
        });

    };

    connection.start().then(() => connection.invoke('ReRegister', '@Model.User.Session.SessionCode'));

    </script>
